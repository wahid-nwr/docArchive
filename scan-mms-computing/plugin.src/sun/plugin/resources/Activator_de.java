package sun.plugin.resources;

import java.util.ListResourceBundle;

public class Activator_de extends ListResourceBundle
{
  static final Object[][] contents = { { "loading", "Ladevorgang läuft {0}" }, { "java_applet", "Java-Applet" }, { "failed", "Fehler beim Laden des Java-Applets..." }, { "image_failed", "Fehler beim Erstellen des benutzerdefinierten Bildes. Überprüfen Sie den Dateinamen des Bildes." }, { "java_not_enabled", "Java ist nicht aktiviert" }, { "exception", "Ausnahme: {0}" }, { "bean_code_and_ser", "Für Bean können nicht gleichzeitig CODE und JAVA_OBJECT definiert sein " }, { "status_applet", "Applet {0} {1}" }, { "optpkg.cert_expired", "Das Sicherheitszertifikat ist abgelaufen.  Optionales Paket nicht installiert." }, { "optpkg.cert_notyieldvalid", "Das Sicherheitszertifikat ist ungültig.  Optionales Paket nicht installiert." }, { "optpkg.cert_notverify", "Der Urheber konnte nicht von einer vertrauens- würdigen Quelle verifiziert werden. Optionales Paket nicht installiert." }, { "optpkg.general_error", "Allgemeiner Ausnahmefehler.  Optionales Paket nicht installiert." }, { "optpkg.caption", "Sicherheitswarnung" }, { "optpkg.installer.launch.wait", "Klicken Sie auf 'OK', um diesen Dialog zu schließen und das Applet nach Beenden des Installationsprogramms für das optionale Paket weiterzuladen." }, { "optpkg.installer.launch.caption", "Installieren des optionalen Pakets" }, { "optpkg.prompt_user.text", "Das Applet erfordert eine neuere Version des optionalen Pakets.  Möchten Sie fortfahren?" }, { "optpkg.prompt_user.specification", " ({0}-Spezifikation)" }, { "optpkg.prompt_user.implementation", " ({0}-Implementierung)" }, { "optpkg.prompt_user.default.text", "Das Applet erfordert eine Installation des optionalen Pakets.  Möchten Sie fortfahren?" }, { "optpkg.prompt_user.caption", "Download anfordern" }, { "cache.error.text", "Die Dateien im Cache konnten nicht aktualisiert werden." }, { "cache.error.caption", "Fehler - Cache" }, { "cache.version_format_error", "{0} hat nicht das Format xxxx.xxxx.xxxx.xxxx, wobei x eine hexadezimale Zahl ist" }, { "cache.version_attrib_error", "Anzahl der in 'cache_archive' angegebenen Attribute entspricht nicht der Anzahl in 'cache_version'" }, { "cache.header_fields_missing", "Wert für Datum der letzten Änderung und/oder Ablaufdatum ist nicht verfügbar.  Die Jar-Datei wird nicht in den Cache geschrieben." }, { "applet.progress.load", "Applet wird geladen..." }, { "applet.progress.init", "Applet wird initialisiert..." }, { "applet.progress.start", "Applet wird gestartet..." }, { "applet.progress.stop", "Applet wird angehalten..." }, { "applet.progress.destroy", "Applet wird zerstört..." }, { "applet.progress.dispose", "Applet wird verworfen..." }, { "applet.progress.quit", "Applet wird beendet..." }, { "applet.progress.stoploading", "Ladevorgang abgebrochen..." }, { "applet.progress.interrupted", "Thread unterbrochen..." }, { "applet.progress.joining", "Applet-Thread wird beigetreten..." }, { "applet.progress.joined", "Applet-Thread wurde beigetreten..." }, { "applet.progress.loadImage", "Bild wird geladen " }, { "applet.progress.loadAudio", "Audiodatei wird geladen " }, { "applet.progress.findinfo.0", "Informationen werden gesucht..." }, { "applet.progress.findinfo.1", "Fertig..." }, { "applet.progress.timeout.wait", "Warten auf Timeout..." }, { "applet.progress.timeout.jointing", "Beitreten wird ausgeführt..." }, { "applet.progress.timeout.jointed", "Beitreten abgeschlossen..." }, { "modality.register", "Registrierter Modality-Listener" }, { "modality.unregister", "Nicht registrierter Modality-Listener" }, { "modality.pushed", "Modality-Push durchgeführt" }, { "modality.popped", "Modality-Pop durchgeführt" }, { "progress.listener.added", "Fortschritts-Listener hinzugefügt: {0}" }, { "progress.listener.removed", "Fortschritts-Listener entfernt: {0}" }, { "liveconnect.UniversalBrowserRead.enabled", "JavaScript: UniversalBrowserRead aktiviert" }, { "liveconnect.java.system", "JavaScript: Java-Systemcode wird aufgerufen" }, { "liveconnect.same.origin", "JavaScript: Aufrufer und Aufgerufener haben denselben Ursprung" }, { "liveconnect.default.policy", "JavaScript: Standard-Sicherheitsrichtlinie = {0}" }, { "liveconnect.UniversalJavaPermission.enabled", "JavaScript: UniversalJavaPermission aktiviert" }, { "liveconnect.wrong.securitymodel", "Netscape-Sicherheitsmodell wird nicht mehr unterstützt.\nBitte stellen Sie auf das Java 2-Sicherheitsmodell um.\n" }, { "pluginclassloader.created_files", "{0} wurde im Cache erstellt." }, { "pluginclassloader.deleting_files", "JAR-Dateien werden aus Cache gelöscht." }, { "pluginclassloader.file", "   Löschen aus Cache {0}" }, { "pluginclassloader.empty_file", "{0} ist leer und wird aus Cache gelöscht." }, { "appletcontext.audio.loaded", "Audio-Clip geladen:{0} " }, { "appletcontext.image.loaded", "Bild geladen: {0}" }, { "securitymgr.automation.printing", "Automatisierung: Drucken akzeptieren" }, { "classloaderinfo.referencing", "ClassLoader wird referenziert: {0}, refcount={1}" }, { "classloaderinfo.releasing", "ClassLoader wird freigegeben: {0}, refcount={1}" }, { "classloaderinfo.caching", "ClassLoader wird im Cache abgelegt: {0}" }, { "classloaderinfo.cachesize", "Aktuelle Größe des ClassLoader-Cache: {0}" }, { "classloaderinfo.num", "Anzahl der ClassLoader im Cache größer als {0}, Referenz aufheben {1}" }, { "jsobject.call", "JSObject::call: Name={0}" }, { "jsobject.eval", "JSObject::eval({0})" }, { "jsobject.getMember", "JSObject::getMember: Name={0}" }, { "jsobject.setMember", "JSObject::setMember: Name={0}" }, { "jsobject.removeMember", "JSObject::removeMember: Name={0}" }, { "jsobject.getSlot", "JSObject::getSlot: {0}" }, { "jsobject.setSlot", "JSObject::setSlot: Slot={0}" }, { "jsobject.invoke.url.permission", "Die URL des Applets lautet {0}, die Berechtigung = {1}" }, { "optpkg.install.info", "Optionales Paket wird installiert {0}" }, { "optpkg.install.fail", "Installation von optionalem Paket fehlgeschlagen." }, { "optpkg.install.ok", "Installation von optionalem Paket erfolgreich." }, { "optpkg.install.automation", "Automatisierung: Installation von optionalem Paket akzeptieren" }, { "optpkg.install.granted", "Download von optionalem Paket vom Benutzer gewährt, Download von {0}" }, { "optpkg.install.deny", "Download von optionalem Paket vom Benutzer nicht gewährt" }, { "optpkg.install.begin", "{0} wird installiert " }, { "optpkg.install.java.launch", "Java-Installationsprogramm wird gestartet" }, { "optpkg.install.java.launch.command", "Java-Installationsprogramm wird gestartet durch {0}" }, { "optpkg.install.native.launch", "Systemeigenes Installationsprogramm wird gestartet" }, { "optpkg.install.native.launch.fail.0", "Ausführen von {0} nicht möglich" }, { "optpkg.install.native.launch.fail.1", "Zugriff auf {0} nicht möglich" }, { "optpkg.install.raw.launch", "Optionales Raw-Paket wird installiert" }, { "optpkg.install.raw.copy", "Optionales Raw-Paket wird von {0} nach {1} kopiert" }, { "optpkg.install.error.nomethod", "Dependent Extension Provider nicht installiert : Methode  addExtensionInstallationProvider kann nicht abgerufen werden" }, { "optpkg.install.error.noclass", "Dependent Extension Provider nicht installiert : Klasse sun.misc.ExtensionDependency kann nicht abgerufen werden" }, { "progress_dialog.downloading", "Plug-in: Download-Vorgang läuft..." }, { "progress_dialog.dismiss_button", "Verwerfen" }, { "progress_dialog.dismiss_button.acceleratorKey", new Integer(86) }, { "progress_dialog.from", "von" }, { "applet_viewer.color_tag", "Falsche Anzahl von Komponenten in {0}" }, { "progress_info.downloading", "Download von JAR-Dateien" }, { "progress_bar.preload", "JAR-Dateien werden vorab geladen: {0}" }, { "cache.size", "Cache-Größe: {0}" }, { "cache.cleanup", "Größe des Cache ist: {0} Byte, Bereinigung erforderlich" }, { "cache.full", "Cache ist voll: Datei {0} wird gelöscht" }, { "cache.inuse", "Datei {0} kann nicht gelöscht werden, da sie von dieser Anwendung verwendet wird" }, { "cache.notdeleted", "Datei {0} kann nicht gelöscht werden, da sie möglicherweise von dieser und/oder anderen Anwendungen verwendet wird" }, { "cache.out_of_date", "Kopie von {0} im Cache ist nicht aktuell\n  Kopie im Cache: {1}\n  Kopie auf dem Server: {2}" }, { "cache.loading", "{0} wird aus dem Cache geladen" }, { "cache.cache_warning", "ACHTUNG: {0} kann nicht im Cache gespeichert werden" }, { "cache.downloading", "Download von {0} in den Cache" }, { "cache.cached_name", "Name der Datei im Cache: {0}" }, { "cache.load_warning", "ACHTUNG: Fehler beim Lesen von {0} aus Cache." }, { "cache.disabled", "Cache vom Benutzer deaktiviert" }, { "cache.minSize", "Cache ist deaktiviert, Cache-Grenze auf {0} gesetzt, mindestens 5 MB sollten angegeben werden" }, { "cache.directory_warning", "ACHTUNG: {0} ist kein Verzeichnis. Cache wird deaktiviert." }, { "cache.response_warning", "ACHTUNG: Unerwartete Antwort {0} für {1}.  Die Datei wird erneut heruntergeladen." }, { "cache.enabled", "Cache ist aktiviert" }, { "cache.location", "Speicherort: {0}" }, { "cache.maxSize", "Maximale Größe: {0}" }, { "cache.create_warning", "ACHTUNG: Cache-Verzeichnis {0} konnte nicht erstellt werden. Caching wird deaktiviert." }, { "cache.read_warning", "ACHTUNG: Cache-Verzeichnis {0} kann nicht gelesen werden. Caching wird deaktiviert." }, { "cache.write_warning", "ACHTUNG: In Cache-Verzeichnis {0} kann nicht geschrieben werden. Caching wird deaktiviert." }, { "cache.compression", "Kompressionsstufe: {0}" }, { "cache.cert_load", "Zertifikat für {0} wird aus JAR-Cache gelesen" }, { "cache.jarjar.invalid_file", "Datei .jarjar enthält eine Datei, die keine .jar-Datei ist" }, { "cache.jarjar.multiple_jar", "Datei .jarjar enthält mehr als eine .jar-Datei" }, { "cache.version_checking", "Version von {0} wird überprüft, angegebene Version ist {1}" }, { "cache.preloading", "Datei {0} wird vorab geladen" }, { "net.proxy.auto.result.error", "Proxy-Einstellungen konnten nicht durch Auswertung bestimmt werden - Rückgriff auf DIREKTE" }, { "lifecycle.applet.found", "Zuvor angehaltenes Applet aus dem Lebenszyklus-Cache gefunden" }, { "lifecycle.applet.support", "Applet unterstützt Legacy-Lebenszyklusmodell - Applet dem Lebenszyklus-Cache hinzufügen" }, { "lifecycle.applet.cachefull", "Lebenszyklus-Cache ist voll - die am längsten nicht verwendeten Applets entfernen" }, { "com.method.ambiguous", "Methode kann nicht ausgewählt werden, keine eindeutigen Parameter" }, { "com.method.notexists", "{0} :Methode nicht vorhanden" }, { "com.notexists", "{0} :Methode/Eigenschaft nicht vorhanden" }, { "com.method.invoke", "Methode wird gestartet: {0}" }, { "com.method.jsinvoke", "JS-Methode wird gestartet: {0}" }, { "com.method.argsTypeInvalid", "Die Parameter konnten nicht zu den erforderlichen Typen konvertiert werden" }, { "com.method.argCountInvalid", "Anzahl der Argumente nicht korrekt" }, { "com.field.needsConversion", "Muss konvertiert werden: {0} --> {1}" }, { "com.field.typeInvalid", " kann nicht konvertiert werden zu Typ: {0}" }, { "com.field.get", "Eigenschaft wird gelesen: {0}" }, { "com.field.set", "Eigenschaft wird festgelegt: {0}" }, { "rsa.cert_expired", "Das Sicherheitszertifikat ist abgelaufen.  Der Code wird wie nicht signierter Code behandelt." }, { "rsa.cert_notyieldvalid", "Das Sicherheitszertifikat ist ungültig.  Der Code wird wie nicht signierter Code behandelt." }, { "rsa.general_error", "Der Urheber konnte nicht von einer vertrauens- würdigen Quelle verifiziert werden. Der Code wird wie nicht signierter Code behandelt." }, { "dialogfactory.menu.show_console", "Java-Konsole anzeigen" }, { "dialogfactory.menu.hide_console", "Java-Konsole verbergen" }, { "dialogfactory.menu.about", "Anwendungsinfo Java Plug-in" }, { "dialogfactory.menu.copy", "Kopieren" }, { "dialogfactory.menu.open_console", "Java-Konsole öffnen" }, { "dialogfactory.menu.about_java", "Anwendungsinfo Java(TM)" } };

  public Object[][] getContents()
  {
    return contents;
  }
}

/* Location:           /home/wahid/Downloads/webscanning/plugin.jar
 * Qualified Name:     sun.plugin.resources.Activator_de
 * JD-Core Version:    0.6.2
 */